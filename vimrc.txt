"##################################################################[Plugin manager]
" http://www.cnblogs.com/songfy/p/5635757.html 
set rtp+=~/.vim/bundle/Vundle.vim

call vundle#begin()
Plugin 'Yggdroot/LeaderF'
Plugin 'VundleVim/Vundle.vim'
"Plugin 'tacahiroy/ctrlp-funky'
Plugin 'tpope/vim-fugitive'   
"Plugin 'vim-scripts/winmanager'
Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
"Plugin 'kien/ctrlp.vim'
Plugin 'wincent/command-t'
Plugin 'scrooloose/nerdtree'
Plugin 'majutsushi/tagbar'
Plugin 'jiangmiao/auto-pairs'
"Plugin 'minibufexpl.vim'
Plugin 'jlanzarotta/bufexplorer'
Plugin 'scrooloose/nerdcommenter'
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'
Plugin 'portante/cscope'
Plugin 'yegappan/mru'
Plugin 'rking/ag.vim'
Plugin 'altercation/vim-colors-solarized'
"Plugin 'vim-airline/vim-airline'
Plugin 'Valloric/YouCompleteMe' "NEED VIM8.0+ & PYTHON3.5+ support.
"Plugin 'vim/vim' "vim8.0+
Plugin 'morhetz/gruvbox'

call vundle#end()

"colorscheme github
"colorscheme molokai
colorscheme gruvbox
set background=dark

let g:molokai_original = 1
let g:rehash256 = 1
highlight Normal guibg=NONE ctermbg=None

let mapleader=" "
filetype plugin indent on

"###################################################################[srcExpl]
"nmap <F5> :SrcExplToggle<CR>    		"设置快捷键为F5
"let g:SrcExpl_winHeight=6       		"高度为6
"let g:SrcExpl_refreshTime=100   		"刷新时间100ms
"let g:SrcExpl_jumpKey='<ENTER>' 		"回车键跳转定义
"let g:SrcExpl_gobackKey='<SPACE>'       "空格键返回
"let g:SrcExpl_pluginList=[
"                 \'_Tag_List_',
"				 \'NERD_tree_',
"				 \'Source_Explorer'
"			     \]						"避免插件冲突
"let g:SrcExpl_searchLocalDef=1  		"搜索本地的定义
"let g:SrcExpl_isUpdateTags=0    		"文件打开时不更新tags
"let g:SrcExpl_updateTagsCmd='ctags --sort=foldcase -R .'		"用ctags的命令创建tags
"let g:SrcExpl_updateTagsKey='<F12>'     "更新tags的快捷键
"##################################################################[default value set]
set modelines=0
set backspace=2 "设置更好的删除
syntax on "语法高亮
set noswapfile
"autocmd InsertLeave * se nocul "用浅色高亮当前行
"autocmd InsertEnter * se cul
set cul
set paste
set smartindent "智能对齐
set autoindent "自动对齐
set confirm "在处理未保存或只读文件的时候，弹出确认框
set tabstop=4 "tab键的宽度
"set softtabstop=4
"set shiftwidth=4 "统一缩进为4
set expandtab "不要用空格替代制表符

set history=50  "历史纪录数
"set nohlsearch
set hlsearch
set incsearch "搜素高亮,搜索逐渐高亮

set gdefault "行内替换
set encoding=utf-8
set fileencodings=utf-8,ucs-bom,shift-jis,gb18030,gbk,gb2312,cp936,utf-16,big5,euc-jp,latin1 "编码设置

"set guifont=Menlo:h16:cANSI "设置字体
set langmenu=zn_CN.UTF-8
set helplang=cn  "语言设置
set ruler "在编辑过程中，在右下角显示光标位置的状态行
set laststatus=2  "总是显示状态行
function! CurDir()
    let curdir = substitute(getcwd(), $HOME, "~", "g")
    return curdir
endfunction
set statusline=[%F]%y%r%m%*%=[Line:%l/%L,Column:%c][%p%%]
set showcmd "在状态行显示目前所执行的命令，未完成的指令片段也会显示出来
set scrolloff=3 "光标移动到buffer的顶部和底部时保持3行的距离
"set showmatch "高亮显示对应的括号
set matchtime=5 "对应括号高亮时间(单位是十分之一秒)
set autowrite "在切换buffer时自动保存当前文件
set wildmenu  "增强模式中的命令行自动完成操作
set linespace=2 "字符间插入的像素行数目
filetype plugin indent on "分为三部分命令:file on,file plugin on,file indent on 
                          "分别是自动识别文件类型, 用用文件类型脚本,使用缩进定义文件

set foldenable  "允许折叠
"set cursorline "突出显示当前行
highlight CursorLine   cterm=NONE ctermbg=grey ctermfg=black guibg=NONE guifg=NONE
set magic  "设置魔术？神马东东
set ignorecase "搜索忽略大小写
"filetype on "打开文件类型检测功能

set foldmethod=syntax "使用语法高亮定义代码折叠: zc 折叠, zo 展开
set foldlevelstart=99 "打开文件是默认不折叠代码
set fdm=indent 
set mouse=a
set number "显示行号
syntax enable
set fileformats=unix,dos

" 自动切换vim工作目录
" set autochdir
" :cd   改变vim的当前工作路径
" :lcd  改变当前窗口的工作路径
" :pwd  查看当前的工作路径

au BufRead,BufNewFile *.hal set filetype=c 
au BufRead,BufNewFile *.bp set filetype=c 
au BufRead,BufNewFile *.txt set filetype=c 
au BufRead,BufNewFile *.log set filetype=c 
"#####################################################################LeaderF——模糊搜索
let g:Lf_ShortcutF = '<c-p>'
let g:Lf_WorkingDirectoryMode = 'AF'
let g:Lf_RootMarkers = ['.git', '.svn', '.hg', '.project', '.root']
let g:Lf_UseVersionControlTool=1 "这个是默认选项, 可以不写
let g:Lf_ShowRelativePath = 0
let g:Lf_HideHelp = 1
let g:Lf_DefaultExternalTool='rg'
" 需要先在项目的根目录创建.cache/
" 【需求1】LeaderF将.cache/所在目录识别为项目的根目录 并且 将索引文件保存在该目录中
let g:Lf_RootMarkers = ['.cache']
let g:Lf_GtagsStoreInRootMarker = 1
" 【需求2】当文件保存时，自动更新索引文件，该值缺省为1
let g:Lf_GtagsAutoUpdate = 1
" 【需求4】当在项目目录及该目录任意子目录下执行vim时，自动识别项目根目录及缓存目录（.cache/）
let g:cache_dir = fnamemodify(finddir('.cache', ';'), ':p')
let g:root_dir = fnamemodify(g:cache_dir, ':h:h')
" 如果没有查找到目录目标目录则直接以当前目录作为根目录
if g:root_dir == expand('~') || empty(g:root_dir)
let g:root_dir = getcwd()
endif
" 【需求3】设置环境变量GTAGSROOT以及GTAGSDBPATH，让Gtags可以找到Leaderf gtags生成的索引文件
"          否则VIM启动后直接执行:Gtags命令会报错（除非先执行一次Leaderf gtags）
let $GTAGSROOT = g:root_dir
let $GTAGSDBPATH = g:cache_dir . '/.LfGtags'
let $GTAGSLABEL='native'

"##################################################################################gtags
let $GTAGSCONF = '/work/oppo_80398978//gtags/share/gtags/gtags.conf'
let g:Lf_GtagsAutoGenerate = 1
let g:Lf_GtagsSource = 1
let g:Lf_GtagsGutentags = 1
"let g:gutentags_cache_dir = expand(g:Lf_CacheDirectory.'\.LfCache\gtags')
" 将自动生成的 ctags/gtags 文件全部放入 ~/.cache/tags 目录中，避免污染工程目录
let s:vim_tags = expand('~/.cache/tags')
"let s:vim_tags = g:cache_dir
let g:gutentags_cache_dir = s:vim_tags


" gutentags 搜索工程目录的标志，当前文件路径向上递归直到碰到这些文件/目录名
let g:gutentags_project_root = ['.root', '.svn', '.git', '.hg', '.project']

" 所生成的数据文件的名称
let g:gutentags_ctags_tagfile = '.tags'

" 同时开启 ctags 和 gtags 支持：
let g:gutentags_modules = []
let g:gutentags_modules += ['gtags_cscope']
if executable('ctags')
	let g:gutentags_modules += ['ctags']
endif
"if executable('gtags-cscope') && executable('gtags')
"	let g:gutentags_modules += ['gtags_cscope']
"endif

" 配置 ctags 的参数，老的 Exuberant-ctags 不能有 --extra=+q，注意
"let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
let g:gutentags_ctags_extra_args = ['--fields=+niazS']
let g:gutentags_ctags_extra_args += ['--c++-kinds=+px']
let g:gutentags_ctags_extra_args += ['--c-kinds=+px']

" 如果使用 universal ctags 需要增加下面一行，老的 Exuberant-ctags 不能加下一行
"let g:gutentags_ctags_extra_args += ['--output-format=e-ctags']

" 禁用 gutentags 自动加载 gtags 数据库的行为
let g:gutentags_auto_add_gtags_cscope = 0

"####################################################
let g:gutentags_define_advanced_commands = 1

" 检测 ~/.cache/tags 不存在就新建
if !isdirectory(s:vim_tags)
   silent! call mkdir(s:vim_tags, 'p')
 endif

"#######################################################LeaderF
autocmd BufNewFile,BufRead X:/yourdir* let g:Lf_WildIgnore={'file':['*.vcproj', '*.vcxproj'],'dir':[]}
 "文件搜索
nnoremap <silent> <Leader>ff :Leaderf file<CR>
"历史打开过的文件
nnoremap <silent> <Leader>fr :Leaderf mru<CR>
"Buffer
nnoremap <silent> <Leader>fb :Leaderf buffer<CR>
"函数搜索（仅当前文件里）
nnoremap <silent> <Leader>fg :Leaderf function<CR>
"模糊搜索，很强大的功能，迅速秒搜
nnoremap <silent> <Leader>rg :Leaderf rg<CR>
"<C-C>, <ESC> : 退出
"<C-R> : 在模糊查询和正则表达式模式间切换
"<C-F> : 在全路径搜索和名字搜索模式间切换
"<Tab> : 切换成normal模式
"<C-V>, <S-Insert> : 从剪切板里copy字符串进行查询
"<C-U> : 清除已经打出的字符
"<C-J>, <C-K> : 在结果列表中移动
"<Up>, <Down> : 从历史记录里调出上一次/下一次的输入pattern
"<2-LeftMouse> or <CR> : 打开在光标处的文件或者被选择的多个文件
"<F5>  : 刷新缓存
"<C-P> : 预览选中结果
"<C-Up> : 在预览popup窗口里滚动向上
"<C-Down> : 在预览popup窗口里滚动向下
let s:cachedir = expand('/work/oppo_80398978/temp/cache')
let s:configdir = expand('/work/oppo_80398978/temp/cache/config')
let g:Lf_PreviewInPopup = 0
let g:Lf_WindowHeight = 0.30
let g:Lf_CacheDirectory = s:cachedir
"let g:Lf_StlColorscheme = 'powerline'
" let g:Lf_PreviewResult = {
"         \ 'File': 0,
"         \ 'Buffer': 0,
"         \ 'Mru': 0,
"         \ 'Tag': 0,
"         \ 'BufTag': 1,
"         \ 'Function': 1,
"         \ 'Line': 1,
"         \ 'Colorscheme': 0,
"         \ 'Rg': 0,
"         \ 'Gtags': 0
"         \}
let g:Lf_NormalMap = {
	\ "File":   [["<ESC>", ':exec g:Lf_py "fileExplManager.quit()"<CR>']],
	\ "Buffer": [["<ESC>", ':exec g:Lf_py "bufExplManager.quit()"<CR>']],
	\ "Mru":    [["<ESC>", ':exec g:Lf_py "mruExplManager.quit()"<CR>']],
	\ "Tag":    [["<ESC>", ':exec g:Lf_py "tagExplManager.quit()"<CR>']],
	\ "Function":    [["<ESC>", ':exec g:Lf_py "functionExplManager.quit()"<CR>']],
	\ "Colorscheme":    [["<ESC>", ':exec g:Lf_py "colorschemeExplManager.quit()"<CR>']],
	\ }       

"tagbar
let g:tagbar_width = 30
let g:tagbar_ctags_bin = 'ctags'
let g:tagbar_right=1    
nmap <F8> :TagbarToggle<CR>

"nerd-tree
" 关闭NERDTree快捷键
map <leader>t :NERDTreeToggle<CR>
" 显示行号
let NERDTreeShowLineNumbers=1
let NERDTreeAutoCenter=1
" 是否显示隐藏文件
let NERDTreeShowHidden=1
" 设置宽度
let NERDTreeWinSize=30
" 在终端启动vim时，共享NERDTree
let g:nerdtree_tabs_open_on_console_startup=1
" 忽略一下文件的显示
let NERDTreeIgnore=['\.pyc','\~$','\.swp']
" 显示书签列表
let NERDTreeShowBookmarks=1
autocmd BufEnter * lcd %:p:h
map <leader>r :NERDTreeFind<cr>
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ "Unknown"   : "?"
    \ }

"AutoPairs###############################
let g:AutoPairs = {'(':')', '[':']', '{':'}',"'":"'",'"':'"'}
let g:AutoPairs['<']='>'

"supertab
let g:SuperTabDefaultCompletionType="context"

"MRU
let g:MRU_flag = 1
let MRU_Max_Entries = 20
let MRU_Exclude_Files = '^/tmp/.*\|^/var/tmp/.*'
let MRU_Include_Files = '^/home/ramesh/.*'
"nerdcommenter
",ca块之间注释
",cc注释当前行
",cu取消注释
",c切换注释或者不注释
",cA当前行尾部注释

" BufExplorer
""""""""""""""""""""""""""""""
set rtp+=~/.vim/bundle/bufexplorer
let g:bufExplorerShowRelativePath=0  " Show absolute paths.
let g:bufExplorerDefaultHelp=0       " Do not show default help.
let g:bufExplorerShowRelativePath=1  " Show relative paths.
let g:bufExplorerSortBy='mru'        " Sort by most recently used.
let g:bufExplorerSplitRight=1        " Split left.
let g:bufExplorerSplitVertical=1     " Split vertically.
let g:bufExplorerSplitVertSize = 30  " Split width
let g:bufExplorerUseCurrentWindow=1  " Open in new window.
let g:bufExplorerSortBy='fullpath'
let g:bufExplorerSortBy='mru'
let g:bufExplorerSortBy='name'
let g:bufExplorerSortBy='number'
let g:bufExplorerDisableDefaultKeyMapping =0 " Do not disable default key mappings.
let g:bufExplorerSortBy='extension'
" 通过BufExplorer命令
",bl打开历史文件列表  ,bv水平新建历史文件列表窗口   ,bs垂直新建历史文件列表  ,bt关闭
"buffer n (n是数字)  bdelete n

"cscope""""""""""""""""""""""""""""""""""""""'''
set csprg=/work/oppo_80398978/bin/cscope
set csto=0
set cst
set nocsverb
set csverb
set cscopequickfix=s-,c-,d-,i-,t-,e-
if filereadable("cscope.out")
    cs add cscope.out
elseif $CSCOPE_DB != ""
    cs add $CSCOPE_DB
endif
set csverb
"set nocsverb
let cs_auto_jump = 0
nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>:copen<CR>
nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>:copen<CR>
nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>:copen<CR>
nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>:copen<CR>
nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>:copen<CR>
nmap <C-\>f :cs find f <C-R>=expand("<cword>")<CR><CR>:copen<CR>
nmap <C-\>i :cs find i <C-R>=expand("<cword>")<CR><CR>:copen<CR>
"cs find c|d|e|f|g|i|s|t name
"s：查找本C代码符号。
"c：查找调用本函数的函数。
"g：查找本定义。
"d：查找本函数调用的函数。
"t：查找本字符串。
"e：查找本egrep模式。
"f：查找本文件。
"I：查找包含本文件的文件。